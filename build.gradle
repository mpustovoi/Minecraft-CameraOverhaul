subprojects {
	// Skip projects that don't declare a MC version.
	if (project.properties.minecraft_version == null) {
		return
	}

	apply plugin: "java"

	base {
		archivesName = project.properties.archives_base_name
		version = "${project.properties.mod_version}-${project.properties.loader_name}-${project.name}"
		group = project.properties.maven_group

		//layout.buildDirectory = new File(rootProject.projectDir, "build")
		layout.buildDirectory = new File(rootProject.projectDir, "build/${project.properties.loader_name}-${project.name}")
	}

	// Subprojects use the same codebase, but different properties & preprocessor defines.
	sourceSets {
		main.java.srcDirs = [ new File(rootProject.projectDir, "src/main/java").absolutePath ]
		main.resources.srcDirs = [ new File(rootProject.projectDir, "src/main/resources").absolutePath ]
	}

	java {
		// Language version.
		sourceCompatibility = JavaVersion.VERSION_17
		targetCompatibility = JavaVersion.VERSION_1_8
		// Produce a sources jar.
		withSourcesJar()
	}
	tasks.withType(JavaCompile) {
		options.encoding = "UTF-8"
		options.release = 17 // Also language version.
	}

	// Shared dependencies.
	dependencies {
		annotationProcessor 'systems.manifold:manifold-preprocessor:2024.1.1'
	}

	def mcVersionSplit = project.properties.minecraft_version.split("\\.")
	def mcVersionMajor = mcVersionSplit[0]
	def mcVersionMain = mcVersionSplit[1]
	def mcVersionMinor = mcVersionSplit.size() >= 3 ? (mcVersionSplit[2] as String).padLeft(2, '0') : '00'
	def merged_mc_version = "$mcVersionMajor$mcVersionMain$mcVersionMinor"

	tasks.withType(JavaCompile).forEach {
		// Enable & configure manifold
		it.options.compilerArgs += [
			'-Xplugin:Manifold',
			"-AMC_VERSION=${merged_mc_version}",
			"-AMC_${project.properties.minecraft_type.toUpperCase()}",
			"-A${project.properties.loader_name.toUpperCase()}_LOADER",
			"-A${project.properties.loader_type.toUpperCase()}_LOADER"
		]
	}
}
